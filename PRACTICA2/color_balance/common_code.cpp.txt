#include "common_code.hpp"
#include <opencv2/imgproc/imgproc.hpp>
#include <iostream>

cv::Mat fsiv_color_rescaling(const cv::Mat& in, const cv::Scalar& from, const cv::Scalar& to)
{
    CV_Assert(in.type()==CV_8UC3);
    cv::Mat out;
    //TODO
    //Cuidado con dividir por cero.
    //Evita los bucles.
    cv::Scalar scalar; // Creamos un nuevo scalar
        cv::divide(to,from,scalar);
        out = in.mul(scalar); // Cambiamos la escala del color de la imagen
    //
    CV_Assert(out.type()==in.type());
    CV_Assert(out.rows==in.rows && out.cols==in.cols);
    return out;
}

cv::Mat fsiv_wp_color_balance(cv::Mat const& in)
{
    CV_Assert(in.type()==CV_8UC3);
    cv::Mat out;
    //TODO
    //Sugerencia: utiliza el espacio de color GRAY para
    //saber la ilumimancia de un pixel.

    cv::Mat imagen;
    cv::cvtColor(in, imagen, cv::COLOR_BGR2GRAY, 1); // Transformamos la imagen a escala de grises
    cv::Point punto_max;
    cv::minMaxLoc(imagen, NULL, NULL, NULL, &punto_max); // Buscamos el valor mayor y menor de la imagen
    cv::Vec3b max = in.at<cv::Vec3b>(punto_max);
    cv::Scalar aux(max[0],max[1],max[2]);
    out = fsiv_color_rescaling(in,aux,cv::Scalar(255,255,255));

    //
    CV_Assert(out.type()==in.type());
    CV_Assert(out.rows==in.rows && out.cols==in.cols);
    return out;
}

cv::Mat fsiv_gw_color_balance(cv::Mat const& in)
{
    CV_Assert(in.type()==CV_8UC3);
    cv::Mat out;
    //TODO

    cv::Mat imagen;
        cv::cvtColor(in, imagen, cv::COLOR_BGR2GRAY, 1); // Transformamos la imagen a escala de grises
        out = fsiv_color_rescaling(in,cv::mean(in),cv::Scalar(128,128,128));

    //
    CV_Assert(out.type()==in.type());
    CV_Assert(out.rows==in.rows && out.cols==in.cols);
    return out;
}

cv::Mat fsiv_color_balance(cv::Mat const& in, float p)
{
    CV_Assert(in.type()==CV_8UC3);
    CV_Assert(0.0f<p && p<100.0f);
    cv::Mat out;
    //TODO
    //Sugerencia: utiliza el espacio de color GRAY para
    //saber la ilumimancia de un pixel.

    //
    CV_Assert(out.type()==in.type());
    CV_Assert(out.rows==in.rows && out.cols==in.cols);
    return out;
}